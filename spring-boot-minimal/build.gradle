buildscript {
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.9.3'
    }
}
plugins {
    id "io.spring.dependency-management" version "1.1.0"
    id "org.springframework.boot" version "3.3.0"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'com.google.protobuf'

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom 'io.micrometer:micrometer-bom:1.13.0'
        mavenBom 'io.netty:netty-bom:4.1.110.Final'
        mavenBom 'com.linecorp.armeria:armeria-bom:1.31.0'
        mavenBom 'org.junit:junit-bom:5.10.2'
        mavenBom 'io.github.resilience4j:resilience4j-bom:2.2.0'
    }
}

protobuf {
    // Configure the protoc executable.
    protoc {
        // Download from the repository.
        artifact = 'com.google.protobuf:protoc:3.25.1'
    }

    // Locate the codegen plugins.
    plugins {
        // Locate a plugin with name 'grpc'.
        grpc {
            // Download from the repository.
            artifact = 'io.grpc:protoc-gen-grpc-java:1.64.0'
        }
    }
    generateProtoTasks {
        ofSourceSet('main')*.plugins {
            grpc {}
        }
    }
}

dependencies {
  implementation 'com.google.code.findbugs:jsr305:3.0.2'

  testImplementation 'junit:junit:4.13.2'
  testImplementation 'org.assertj:assertj-core:3.25.3'
  testImplementation 'org.junit.jupiter:junit-jupiter-api'
  testImplementation 'org.junit.jupiter:junit-jupiter-params'
  testRuntimeOnly 'org.junit.platform:junit-platform-commons'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
  testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
  testRuntimeOnly 'org.junit.vintage:junit-vintage-engine'
}

dependencies {
    implementation 'org.apache.logging.log4j:log4j-api:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.20.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.20.0'
    implementation('com.linecorp.armeria:armeria-spring-boot3-starter'){
        exclude module: 'spring-boot-starter-logging'
    }

    implementation 'com.linecorp.armeria:armeria-grpc'
    compileOnly 'javax.annotation:javax.annotation-api:1.3.2'

    implementation 'org.hibernate.validator:hibernate-validator:8.0.0.Final'

    // Preprocessor that enables you to use JavaDoc to add description to REST API parameters.
    // If you don't want to use it, you can use the annotation
    // com.linecorp.armeria.server.annotation.Description otherwise.

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor:3.3.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.3.0'
    testImplementation 'com.linecorp.armeria:armeria-junit5'
}

tasks.withType(JavaCompile) {
    sourceCompatibility = '17'
    targetCompatibility = '17'
    options.encoding = 'UTF-8'
    options.debug = true
    options.compilerArgs += '-parameters'
}

tasks.withType(Test) {
    useJUnitPlatform()
}

